# This file defines the infrastructure services needed for local development.
# It allows us to start our entire backend environment with a single command.
services:
  # -------------------- DATABASE --------------------
  # Defines our primary PostgreSQL database service.
  postgres:
    image: postgres:16-alpine
    container_name: payments_postgres
    environment:
      # These variables configure the database on its first run.
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=payments_db
    ports:
      # Maps your local machine's port 5432 to the container's port 5432.
      - "5432:5432"
    volumes:
      # Persists the database data on your machine, so it's not lost when the container stops.
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped

  # -------------------- LEDGER SERVICE (Go) --------------------
  ledger-service:
    build:
      context: ../services/ledger-service # Tells Docker to build from the Dockerfile in this path
    container_name: payments_ledger
    ports:
      - "8082:8082" # Maps your port 8082 to the container's port 8082
    environment:
      - LEDGER_SERVICE_PORT=8082
      # This DSN points to the postgres container over the internal Docker network
      - LEDGER_DB_DSN=postgres://admin:password@postgres:5432/payments_db
    depends_on:
      - postgres # Ensures Postgres starts before the ledger service
    restart: unless-stopped

  # -------------------- KAFKA INFRASTRUCTURE --------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: payments_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: payments_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # -------------------- CACHE --------------------
  redis:
    image: redis:7-alpine
    container_name: payments_redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped

  # -------------------- OBJECT STORAGE --------------------
  minio:
    image: minio/minio:RELEASE.2023-09-07T02-05-02Z
    container_name: payments_minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    ports:
      - "9000:9000" # API port
      - "9001:9001" # Console port
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped

  # -------------------- OBSERVABILITY (METRICS) --------------------
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: payments_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command: --config.file=/etc/prometheus/prometheus.yml
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:10.1.1
    container_name: payments_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped

  # -------------------- OBSERVABILITY (TRACING) --------------------
  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: payments_jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "4317:4317"   # OTLP gRPC receiver
    restart: unless-stopped

  # -------------------- IDENTITY & ACCESS MANAGEMENT --------------------
  keycloak:
    image: quay.io/keycloak/keycloak:22.0.1
    container_name: payments_keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    ports:
      - "8180:8080"
    volumes:
      - keycloak-data:/opt/keycloak/data
    command: start-dev
    restart: unless-stopped

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  keycloak-data:
    driver: local